{"version":3,"sources":["components/Chatgrid.js","App.js","reportWebVitals.js","index.js"],"names":["Chatgrid","socket","name","room","useState","message","setMessage","msgList","setList","author","sendMessage","a","messageData","time","Date","now","getHours","getMinutes","emit","document","getElementById","value","useEffect","on","data","id","map","msg","placeholder","onChange","event","target","Button","onClick","startIcon","fontSize","io","connect","App","myId","setId","online","setStatus","stream","setStream","recievingCall","setReceivingcall","caller","setCaller","callerSignal","setCallerSignal","callAccepted","setCallAccepted","idToCall","setIdToCall","callEnded","setCallEnded","setName","setRoom","myVideo","useRef","peerVideo","connectionRef","from","signal","className","playsInline","muted","ref","autoPlay","style","width","console","log","navigator","mediaDevices","getUserMedia","video","audio","then","current","srcObject","TextField","label","variant","e","marginBottom","text","color","display","marginTop","join","peer","Peer","removeStream","destroy","IconButton","initiator","trickle","userToCall","signalData","callUser","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.12e009e0.chunk.js","sourcesContent":["import React,{useEffect,useState} from 'react';\n// import '/home/muddassir/Documents/reactProjects/vChat/vchatapp/src/App.css'\nimport Send from '@material-ui/icons/Send'\nimport { Button } from '@material-ui/core';\n\nfunction Chatgrid({socket,name,room}) {\n    const [message,setMessage]=useState(\"\");\n    const [msgList,setList]=useState([]);\n    const author=name;\n    const sendMessage=async()=>{\n        \n        if(message!==\"\"){\n            const messageData={\n                room:room,\n                author:name,\n                message:message,\n                time:new Date(Date.now()).getHours()+\":\"+new Date(Date.now()).getMinutes()\n\n\n            };\n            await socket.emit('sendMessage',messageData)\n            setList((msgList)=>[...msgList,messageData])\n            \n        }\n        document.getElementById(\"inp\").value=\"\";\n        \n        \n\n    }\n    useEffect(()=>{\n        socket.on('recieveMessage',data=>{\n            setList((msgList)=>[...msgList,data])\n        })\n    },[socket])\n    return (\n        <div id=\"chat-container\">\n           {/* <div id=\"chat-box\"> */}\n                {/* <div> */}\n                {msgList.map((msg)=>{\n\n                   if(msg.author===author){\n                    return <div id=\"user-box\">\n                                 <h3 id=\"user-msg\">{msg.message}</h3>\n                            </div>\n                   }\n                   else{\n                    return <div id=\"peer-box\">\n                                 <h3 id=\"peer-msg\">{msg.message}</h3>\n                            </div>\n\n                   }\n                   {/* return  <div id={msg.author===author?\"user-msg\":\"peer-msg\"}>\n                                 <h3 >{msg.message}</h3>\n                            </div> */}\n                })}\n                {/* </div> */}\n            \n            {/* </div> */}\n            <div id=\"chat-footer\">\n                <input id=\"inp\" placeholder=\"Message\" onChange={(event)=>{setMessage(event.target.value)}}></input>\n                {message!==\"\"&&<Button onClick={sendMessage} startIcon={<Send  fontSize=\"medium\" id=\"send\" ></Send>}></Button>}\n            </div>\n        </div>\n    );\n}\n\nexport default Chatgrid;\n","import Button from \"@material-ui/core/Button\"\nimport IconButton from \"@material-ui/core/IconButton\"\nimport TextField from \"@material-ui/core/TextField\"\nimport AssignmentIcon from \"@material-ui/icons/Assignment\"\nimport PhoneIcon from \"@material-ui/icons/Phone\"\nimport VideoCallIcon from '@material-ui/icons/VideoCall';\nimport Chatgrid from \"./components/Chatgrid\"\nimport React, { useEffect, useRef, useState } from \"react\"\nimport { CopyToClipboard } from \"react-copy-to-clipboard\"\nimport Peer from \"simple-peer\"\nimport io from \"socket.io-client\"\nimport \"./App.css\"\n\nconst socket=io.connect(\"http://localhost:3002\")\n\nfunction App() {\n  const [myId,setId]=useState(\"\");\n  const [online,setStatus]=useState(true);\n  const [stream,setStream]=useState();\n  const [recievingCall,setReceivingcall]=useState(false);\n  const [caller,setCaller]=useState(\"\");\n  const [callerSignal, setCallerSignal ] = useState()\n\tconst [ callAccepted, setCallAccepted ] = useState(false)\n\tconst [ idToCall, setIdToCall ] = useState(\"\")\n\tconst [ callEnded, setCallEnded] = useState(false)\n\tconst [ name, setName ] = useState(\"\");\n  const [room,setRoom]=useState(\"\");\n\n  var myVideo=useRef();\n  const peerVideo=useRef();\n  const connectionRef=useRef(); //to connect and disconnect\n\n  useEffect(()=>{\n    setStatus(true);\n    socket.on('me',(id)=>{\n      setId(id);\n    })\n    socket.on(\"callUser\",(data)=>{\n      setReceivingcall(true);\n      setCaller(data.from);\n      setName(data.name);\n      setCallerSignal(data.signal);\n    })\n    // console.log(myId)\n  },[])\n  const join=(room)=>{\n    if(room!==\"\" && name!==\"\"){\n      socket.emit('joinRoom',room);\n    }\n  }\n  \n  const callUser=id=>{\n    \n    const peer=new Peer({\n      initiator:true,\n      trickle:false,\n      stream:stream\n    })\n    peer.on('signal',(data)=>{\n          // console.log(id);\n          socket.emit('callUser',{\n            userToCall:id,\n            signalData:data,\n            from:myId,\n            name:name\n          })\n    })\n    peer.on('stream',(stream)=>{\n      peerVideo.current.srcObject=stream;\n    })\n    socket.on(\"callAccepted\",(signal)=>{\n      setCallAccepted(true);\n      peer.signal(signal)\n    })\n    \n    connectionRef.current=peer;\n  }\n\n  const answerCall=()=>{\n    \n    setCallAccepted(true);\n    console.log(\"hi\")\n    const peer=new Peer({\n      initiator:false,\n      trickle:false,\n      stream:stream\n    })\n    peer.on('signal',data=>{\n      socket.emit('answerCall',{signal:data,to:caller})\n    })\n    peer.on('stream',stream=>{\n      peerVideo.current.srcObject=stream;\n    })\n    peer.signal(callerSignal);\n    connectionRef.current=peer;\n  }\n\n  const leaveCall=()=>{\n    setCallEnded(true);\n    const peer=new Peer();\n    peer.on('stream',stream=>{\n      peer.removeStream(stream);\n    })\n    \n    connectionRef.current.destroy();\n   \n  }\n  const askPermission=()=>{\n     online===true?setStatus(false):setStatus(true);\n    console.log(online)\n    if(online===true){\n      navigator.mediaDevices.getUserMedia({ video: true, audio: false }).then((stream) => {\n        setStream(stream)\n          myVideo.current.srcObject = stream\n      })\n    }\n    else if(online===false){\n       setStream(null)\n    }\n\n  }\n  \n \n\n  return (\n    <div className=\"App\">\n      \n        <div className=\"container\">\n         \n              <div className=\"video-container\">\n                  <div className=\"video\">\n                        {stream && <video playsInline muted ref={myVideo} autoPlay style={{width:\"300px\"}}/>\n                        \n                        }\n                  </div>\n                  <div className=\"video\">\n                          {callAccepted && !callEnded?\n                          <video playsInline ref={peerVideo} autoPlay style={{width:\"300px\"}}/>:null}\n\n                  </div>\n              </div>\n              <div className=\"myId\">\n                    {/* {!online?:<div></div>} */}\n                      <div id=\"permission\" >\n                            <Button id=\"permit\" onClick={askPermission} startIcon={<VideoCallIcon fontSize=\"large\"/> }/>\n                      </div>\n                      <TextField\n                        id=\"filled-basic\"\n                        label=\"Name\"\n                        variant=\"filled\"\n                        value={name}\n                        onChange={(e) => setName(e.target.value)}\n                        style={{ marginBottom: \"20px\" }}\n                      />\n                      <CopyToClipboard text={myId} style={{ marginBottom: \"2rem\" }}>\n                        <Button variant=\"contained\" color=\"primary\" startIcon={<AssignmentIcon fontSize=\"large\" />}>\n                          Copy ID\n                        </Button>\n                      </CopyToClipboard>\n                      <div>{myId}</div>\n                      \n\n                      <TextField\n                        id=\"filled-basic\"\n                        label=\"ID to call\"\n                        variant=\"filled\"\n                        value={idToCall}\n                        onChange={(e) => setIdToCall(e.target.value)}\n                      />\n\n                      <div style={{display:\"flex\"}}>\n                      <TextField\n                        id=\"filled-basic\"\n                        label=\"Room\"\n                        variant=\"filled\"\n                        value={room}\n                        onChange={(e) => setRoom(e.target.value)}\n                        style={{ marginBottom: \"20px\" ,marginTop:\"10px\"}}\n                      />\n                      <Button onClick={()=>join(room)} id=\"join\" color=\"red\">join</Button>\n\n                      </div>\n                     \n                      <div className=\"call-button\">\n                            {callAccepted && !callEnded ? (\n                              <Button variant=\"contained\" color=\"secondary\" onClick={leaveCall}>\n                                End Call\n                              </Button>\n                            ) : (\n                              <IconButton color=\"primary\" aria-label=\"call\" onClick={() => callUser(idToCall)}>\n                                <PhoneIcon fontSize=\"large\" />\n                              </IconButton>\n                            )}\n                            {idToCall}\n                      </div>\n               </div>\n               \n                <div>\n                  {recievingCall && !callAccepted ? (\n                      <div className=\"caller\">\n                      <h1 >{name} is calling...</h1>\n                      <Button variant=\"contained\" color=\"primary\" onClick={answerCall}>\n                        Answer\n                      </Button>\n                    </div>\n                  ) : null}\n                </div>\n         </div>\n         <Chatgrid socket={socket} name={name} room={room}/>\n          \n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}